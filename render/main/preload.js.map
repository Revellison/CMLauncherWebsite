{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mCCTXL,EAAOD,QAAUO,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaX,QAGrB,IAAIC,EAASO,EAAyBE,GAAY,CAGjDV,QAAS,CAAC,GAOX,OAHAa,EAAoBH,GAAUT,EAAQA,EAAOD,QAASS,GAG/CR,EAAOD,OACf,C,8ECpBA,gBAIMc,EAAkB,CACtBC,YAAa,CACX,WAAAC,CAAYC,KAAsBC,GAChC,EAAAH,YAAYI,KAAKF,KAAYC,EAC/B,EACA,EAAAE,CAAGH,EAAmBI,GACpB,MAAMC,EAAe,CAACC,KAA6BL,IACjDG,KAAQH,GAGV,OAFA,EAAAH,YAAYK,GAAGH,EAASK,GAEjB,KACL,EAAAP,YAAYS,eAAeP,EAASK,EAAa,CAErD,EACA,IAAAG,CAAKR,EAAmBI,GACtB,EAAAN,YAAYU,KAAKR,GAAS,CAACM,KAAWL,IAASG,KAAQH,IACzD,IAIEQ,EAAoB,CACxBC,eAAgB,IAAM,EAAAZ,YAAYI,KAAK,mBACvCS,eAAgB,IAAM,EAAAb,YAAYI,KAAK,mBACvCU,YAAa,IAAM,EAAAd,YAAYI,KAAK,gBACpCW,YAAa,IAAM,EAAAf,YAAYgB,OAAO,wBAGlCC,EAAa,CACjBC,aAAeC,KACTA,EAAIC,WAAW,YAAcD,EAAIC,WAAW,cAC9C,EAAApB,YAAYI,KAAK,oBAAqBe,EACxC,GAIEE,EAAc,CAClBC,sBAAuBC,eACR,EAAAvB,YAAYgB,OAAO,4BAI9BQ,EAAa,CACjBC,eAAiBC,IACf,EAAA1B,YAAYI,KAAK,0BAA2BsB,EAAS,GAInDC,EAAc,CAClBC,WAAaC,GACJ,EAAA7B,YAAYgB,OAAO,mBAAoBa,IAI5CC,EAAmB,CACvBC,eAAiBC,IACf,MAAMzB,EAAe,CAACC,EAA0ByB,IAAgBD,EAASC,GAGzE,OAFA,EAAAjC,YAAYK,GAAG,gBAAiBE,GAEzB,KACL,EAAAP,YAAYS,eAAe,gBAAiBF,EAAa,CAC1D,GAIL,EAAAP,YAAYK,GAAG,2BAA2B,CAACG,EAAQO,KACjD,MAAMmB,EAAQ,IAAIC,YAAY,0BAA2B,CAAEC,OAAQrB,IACnEsB,OAAOC,cAAcJ,EAAM,IAG7B,EAAAK,cAAcC,kBAAkB,WAAYzC,GAC5C,EAAAwC,cAAcC,kBAAkB,cAAe,IAC1C7B,KACAM,KACAI,KACAG,KACAG,KACAG,G","sources":["webpack://cmlauncher/webpack/universalModuleDefinition","webpack://cmlauncher/external node-commonjs \"electron\"","webpack://cmlauncher/webpack/bootstrap","webpack://cmlauncher/./src/main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Disable no-unused-vars, broken for spread args\n/* eslint no-unused-vars: off */\nimport { contextBridge, ipcRenderer, IpcRendererEvent, shell } from 'electron';\n\nexport type Channels = 'ipc-example' | 'window-minimize' | 'window-maximize' | 'window-close';\n\nconst electronHandler = {\n  ipcRenderer: {\n    sendMessage(channel: Channels, ...args: unknown[]) {\n      ipcRenderer.send(channel, ...args);\n    },\n    on(channel: Channels, func: (...args: unknown[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    },\n    once(channel: Channels, func: (...args: unknown[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n  },\n};\n\nconst windowControlsAPI = {\n  minimizeWindow: () => ipcRenderer.send('window-minimize'),\n  maximizeWindow: () => ipcRenderer.send('window-maximize'),\n  closeWindow: () => ipcRenderer.send('window-close'),\n  isMaximized: () => ipcRenderer.invoke('window-is-maximized'),\n};\n\nconst browserAPI = {\n  openExternal: (url: string) => {\n    if (url.startsWith('http://') || url.startsWith('https://')) {\n      ipcRenderer.send('open-external-url', url);\n    }\n  }\n};\n\nconst settingsAPI = {\n  selectBackgroundImage: async () => {\n    return await ipcRenderer.invoke('select-background-image');\n  },\n};\n\nconst discordAPI = {\n  updatePresence: (username: string) => {\n    ipcRenderer.send('update-discord-presence', username);\n  }\n};\n\nconst launcherAPI = {\n  launchGame: (playerName: string) => {\n    return ipcRenderer.invoke('launch-minecraft', playerName);\n  }\n};\n\nconst minecraftLogsAPI = {\n  onMinecraftLog: (callback: (log: string) => void) => {\n    const subscription = (_event: IpcRendererEvent, log: string) => callback(log);\n    ipcRenderer.on('minecraft-log', subscription);\n    \n    return () => {\n      ipcRenderer.removeListener('minecraft-log', subscription);\n    };\n  }\n};\n\nipcRenderer.on('window-maximized-change', (_event, isMaximized) => {\n  const event = new CustomEvent('window-maximized-change', { detail: isMaximized });\n  window.dispatchEvent(event);\n});\n\ncontextBridge.exposeInMainWorld('electron', electronHandler);\ncontextBridge.exposeInMainWorld('electronAPI', { \n  ...windowControlsAPI, \n  ...browserAPI,\n  ...settingsAPI,\n  ...discordAPI,\n  ...launcherAPI,\n  ...minecraftLogsAPI\n});\n\nexport type ElectronHandler = typeof electronHandler;\n"],"names":["root","factory","exports","module","define","amd","a","i","global","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","electronHandler","ipcRenderer","sendMessage","channel","args","send","on","func","subscription","_event","removeListener","once","windowControlsAPI","minimizeWindow","maximizeWindow","closeWindow","isMaximized","invoke","browserAPI","openExternal","url","startsWith","settingsAPI","selectBackgroundImage","async","discordAPI","updatePresence","username","launcherAPI","launchGame","playerName","minecraftLogsAPI","onMinecraftLog","callback","log","event","CustomEvent","detail","window","dispatchEvent","contextBridge","exposeInMainWorld"],"sourceRoot":""}